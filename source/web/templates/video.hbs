<!--
  Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
  
  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  A copy of the License is located at
  
      http://www.apache.org/licenses/LICENSE-2.0
  
  or in the "license" file accompanying this file. This file is distributed 
  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either 
  express or implied. See the License for the specific language governing 
  permissions and limitations under the License.
-->

{{#if loading}}
	<div class="text-center"><img src="img/loading.gif" class="img-fluid"/></div>
{{else}}
	<br/>
	<div class="container-fluid">
		<div class="row">
			<div class="col-lg-5 col-md-5 col-sm-12 col-xs-12">
				<div class="video-container">
					<video name="video" id="video"
						poster="img/video_splash.png" 
						style="max-width:100%; height:auto">
						<source src="{{{video.s3VideoSignedUrl}}}" type="video/mp4">
						Your browser does not support playing this type of video.
					</video>
					<div class="video-overlay" id="captionOverlay" style="display:none;"></div>
					<div class="timer-overlay" id="timerOverlay" style="display:none;">0.0s</div>
					<div class="speed-overlay" id="speedOverlay" style="display:none;">1.0x</div>
				</div>	

				<div style="display:none;" id="videoControls">
					<div class="slide-container">
						<input type="range" min="0" max="0" value="0" class="slider" id="videoProgress"/>
					</div>

					<div class="text-center">
						<button type="button" class="btn btn-secondary media-button" 
							onclick="stepBackward(true, true)">
							<i class="fa fa-step-backward fa-sm"></i>
						</button>			
						<button type="button" class="btn btn-secondary media-button" 
							onclick="playPause()">
							<i id="playPauseIcon" class="fa fa-play fa-sm"></i>
						</button>	
						<button type="button" class="btn btn-secondary media-button" 
							onclick="stepForward(true, true)">
							<i class="fa fa-step-forward fa-sm"></i>
						</button>
						<button type="button" class="btn btn-secondary 
							media-button selected" 
							onclick="repeatButton()" title="Pause after each caption">
							<i id="repeatIcon" class="fa fa-redo fa-sm"></i>
						</button>
						<button type="button" class="btn btn-secondary 
							media-button" 
							onclick="speedUp()" title="Speed up video">
							<i id="repeatIcon" class="fa fa-plus fa-sm"></i>
						</button>
						<button type="button" class="btn btn-secondary 
							media-button" 
							onclick="slowDown()" title="Slow down">
							<i id="repeatIcon" class="fa fa-minus fa-sm"></i>
						</button>						
					</div>	
				</div>
			</div>
			<div class="col-lg-7 col-md-7 col-sm-12 col-xs-12">
				<div style="display:none;" id="editorControls">
					<div class="text-center control-container">
						<button type="button" class="btn btn-secondary 
							control-button" onclick="mergeCaptions()" title="Merge captions" id="mergeButton">
							<i class="fa fa-plus-square fa-sm"></i> Merge
						</button>
						<!--<button type="button" class="btn btn-secondary 
							control-button" onclick="saveCaptionsLocal()" title="Save captions" id="saveButton">
							<i class="fa fa-save fa-sm"></i> Save
						</button>-->
						<span class="dropdown show">
							<a class="btn btn-secondary dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
							<i class="fa fa-cloud-download-alt fa-sm"></i> Download
							</a>

							<div class="dropdown-menu" aria-labelledby="dropdownMenuLink">
								<a class="dropdown-item" onclick="downloadCaptionsVTTLocal()">WEBVTT</a>
								<a class="dropdown-item" onclick="downloadCaptionsSRTLocal()">SRT</a>
							</div>
						</span>
						<button type="button" class="btn btn-secondary 
							control-button" onclick="burnCaptionsLocal()" title="Save captions" id="burnCaptionsButton">
							<i class="fa fa-closed-captioning fa-sm"></i> Burn In
						</button>						
						<span id="statusButton"></span>
					</div>		
					<form class="form">
                        <div class="form-group">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th style="width: 5.00%">#</th>
                                        <th style="width: 5.00%">Index</th>
                                        <th style="width: 15.00%">Time</th>
                                        <th style="width: 75.00%">Caption</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td>
                                            <input type="checkbox" name="caption" id="prevCaptionCheckbox" />
                                        </td>
                                        <td>
                                            <span id="prevCaptionIndex"></span>
                                        </td>
                                        <td>
                                            <span id="prevTime"></span>
                                        </td>
                                        <td>
                                            <span id="prevCaption"></span>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <input type="checkbox" name="caption" id="currentCaptionCheckbox" />
                                        </td>
                                        <td>
                                            <span id="captionIndex"></span>
                                        </td>
                                        <td>
                                            <span id="currentTime"></span>
                                        </td>
                                        <td>
                                            <span id="currentCaption"></span>
                                            <table class="table table-borderless mt-4">
                                                <tbody id="currentCaptionTbody">
                                                </tbody>
                                            </table>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <input type="checkbox" name="caption" id="nextCaptionCheckbox" />
                                        </td>
                                        <td>
                                            <span id="nextCaptionIndex"></span>
                                        </td>
                                        <td>
                                            <span id="nextTime"></span>
                                        </td>
                                        <td>
                                            <span id="nextCaption"></span>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
						<div class="form-group">
							<label for="confidenceHighlight">Highlight words with confidence less than</label>
							<input type="text" class="form-control input-sm" id="confidenceHighlight" placeholder="Confidence highlight" value="0.75"/>
						</div>						
						<!--<div class="form-group float-right">
							<input type="checkbox" name="autosave" id="autosave" checked>
								Auto save
							</input>
						</div>-->
					</form>
				</div>
			</div>
		</div>
	</div>

	<div class="p-3">
	<dl>
		<dt><i class="fas fa-marker" onclick="javascript:$('#renameVideoModal').modal();" title="Edit video name"></i> Video name</dt>
		<dd>
			<div id="videoName">
				{{video.name}}
			</div>
		</dd>	
		<dt><i class="fas fa-marker" onclick="javascript:$('#descriptionVideoModal').modal();" title="Edit video name"></i> Video description</dt>
		<dd>
			<div id="videoDescription">
			 	{{video.description}}
			</div>
		</dd>
	</dl>
	</div>

	<div class="modal fade" id="renameVideoModal" role="dialog">
		<div class="modal-dialog modal-lg">
			<div class="modal-content">
				<div class="modal-header">
					<h4 class="modal-title">Edit a new video name</h4>
					<button type="button" class="close" data-dismiss="modal">&times;</button>
	  			</div>
				<div class="modal-body">
					<div class="form-group">
						<input type="text" class="form-control" id="videoNameEdit" value="{{video.name}}"/>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-primary" data-dismiss="modal" id="videoNameSave">Save</button>				
					<button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
				</div>
			</div>
		</div>
	</div>	

	<div class="modal fade" id="descriptionVideoModal" role="dialog">
		<div class="modal-dialog modal-lg">
			<div class="modal-content">
				<div class="modal-header">
					<h4 class="modal-title">Enter a description for this video</h4>
					<button type="button" class="close" data-dismiss="modal">&times;</button>
	  			</div>
				<div class="modal-body">
					<div class="form-group">
						<textarea class="form-control" rows="4" id="videoDescriptionEdit">{{video.description}}</textarea>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-primary" data-dismiss="modal" id="videoDescriptionSave">Save</button>				
					<button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
				</div>
			</div>
		</div>
	</div>		

	<script> 

		var captionData = {{{ video.captions }}};

		var videoId = '{{video.videoId}}';
		var videoName = '{{video.name}}';
		var videoDescription = '{{video.description}}';
		var videoStatus = '{{video.status}}';
        var videoLanguage = '{{video.language}}';
        console.log("videoLanguage is " + videoLanguage);

		var video = document.getElementById("video"); 
		var videoProgress = document.getElementById("videoProgress");
        var prevTimeEdit = document.getElementById("prevTime");
        var currentTimeEdit = document.getElementById("currentTime");
        var nextTimeEdit = document.getElementById("nextTime");
		// var captionEdit = document.getElementById("caption");
		var captionOverlay = document.getElementById("captionOverlay");
		var timerOverlay = document.getElementById("timerOverlay");
		var speedOverlay = document.getElementById("speedOverlay");
		var autosave = document.getElementById("autosave");
		var saveButton = document.getElementById("saveButton");
		var confidenceHighlight = document.getElementById("confidenceHighlight");

		var duration = 0;
		var progressMax = 10000;
		var captionIndex = -1;
		var pausePerCaption = true;
		var playSpeed = 1.0;
		var dirty = false;
		var confidence = 0.75;

		toastr.success('Loading video and captions...');

		renderStatusButton(videoId, videoStatus);
		renderBurnCaptionsButton(videoStatus);

		videoProgress.oninput = function() {
			var time = videoProgress.value / progressMax * duration;

			while (time >= captionData[captionIndex].end)
			{
				if (captionIndex == captionData.length - 1)
				{
					break;
				}
				stepForward(false, false);
			}

			while (time < captionData[captionIndex].start)
			{
				if (captionIndex == 0)
				{
					break;
				}
				stepBackward(false, false);
			}

			video.currentTime = time;
		}

		function renderCaption() {

            final = "";
            for (var i = 0; i < captionData[captionIndex].words.length; i++) {

                if (captionData[captionIndex].words[i].c < confidence && captionData[captionIndex].words[i].c > 0)
                {
                    final += "<mark>" + captionData[captionIndex].words[i].w + "</mark>";
                } else {
                    final += captionData[captionIndex].words[i].w;
                }

                if (videoLanguage != 'zh-CN') {
                    final += " ";
                }
            }

			captionOverlay.innerHTML = final;
		}

        function modifyWords(captionIndex, wordIndex) {
            var words = $('#words-'+captionIndex+'-'+wordIndex).val();
            captionData[captionIndex].words[wordIndex].w = words;
            captionData[captionIndex].words[wordIndex].c = 1;
            var caption = "";
            for (var i = 0; i < captionData[captionIndex].words.length; i++)
            {
                caption += captionData[captionIndex].words[i].w;

                if (videoLanguage != 'zh-CN' && i < (captionData[captionIndex].words.length - 1)) {
                    caption += " ";
                }
            }
            captionData[captionIndex].caption = caption;
            $('#currentCaption').html(caption);
            renderCaption();
			updateCaptions(videoId, captionIndex, wordIndex, words, "MODIFY");
        }

        function splitCaption(captionIndex, wordIndex) {
            console.log("captionIndex is " + captionIndex + " and wordIndex is " + wordIndex);
            var captionPart = {
                start: 0,
                caption: "",
                wordConfidence: [],
                words: []
            };

            var captionValue1 = captionValue2 = "";

            for (var i=captionData.length; i > captionIndex; i--) {
                captionData[i] = captionData[i-1];
            }

            console.log("words length is " + captionData[captionIndex].words.length);
            console.log("wordIndex + 1 = " + (wordIndex+1));

            for (var i=wordIndex+1; i < captionData[captionIndex].words.length; i++) {
                console.log("current i is " + i);
                if (i == wordIndex+1) {
                    console.log("first words:");
                    console.dir(captionData[captionIndex].words[i]);
                    if ("st" in captionData[captionIndex].words[i]) {
                        captionPart.start = Number(captionData[captionIndex].words[i].st);
                    } else {
                        captionPart.start = Number(captionData[captionIndex].words[i+1].st);
                    }
                }
                if (i == (captionData[captionIndex].words.length - 1)) {
                    captionPart.end = Number(captionData[captionIndex].words[i].et);
                }
                captionPart.words[i-wordIndex-1] = captionData[captionIndex].words[i];
                captionValue2 += captionData[captionIndex].words[i].w;

                if (videoLanguage != 'zh-CN' && i < (captionData[captionIndex].words.length - 1)) {
                    captionValue2 += " ";
                }

            }
            captionData[captionIndex].words.splice(wordIndex+1);
            captionPart.caption = captionValue2;
            console.log("captionPart:");
            console.dir(captionPart);

            console.log("captionLeft with index " + captionIndex + ":");
            console.dir(captionData[captionIndex]);

            for (var i=0; i < captionData[captionIndex].words.length; i++) {
                captionValue1 += captionData[captionIndex].words[i].w;

                if (videoLanguage != 'zh-CN' && i < (captionData[captionIndex].words.length - 1)) {
                    captionValue1 += " ";
                }
            }

            captionData[captionIndex].caption = captionValue1;
            if ("et" in captionData[captionIndex].words[wordIndex]) {
                captionData[captionIndex].end = Number(captionData[captionIndex].words[wordIndex].et);
            } else {
                captionData[captionIndex].end = Number(captionData[captionIndex].words[wordIndex-1].et);
            }

            captionData[captionIndex+1] = captionPart;

//            console.log("captionData:")
//            console.dir(captionData);

			updateCaptionEditor();
			renderCaption();
//			saveCaptions(videoId, captionData);
			updateCaptions(videoId, captionIndex, wordIndex, "", "SPLITE");
        }

        function mergeCaptions() {
            var checkedCaptions = [];
            var part1Index = part2Index = 0;
            $("input[name='caption']:checked").each(function(i) {
                checkedCaptions[i] = $(this).val();
            });

            part1Index = parseInt(checkedCaptions[0]);
            part2Index = parseInt(checkedCaptions[1]);

            if (checkedCaptions.length == 3 || (part2Index - part1Index) > 1) {
                $("input[name='caption']").prop("checked",false);
                return "";
            }

            console.log(checkedCaptions);

            for (var i=0; i < captionData[part2Index].words.length; i++) {
                captionData[part1Index].words.push(captionData[part2Index].words[i]);
                if (videoLanguage != 'zh-CN') {
                    captionData[part1Index].caption += " ";
                }
                captionData[part1Index].caption += captionData[part2Index].words[i].w;
            }
            captionData[part1Index].end = captionData[part2Index].end;

            for (var i=part2Index; i < captionData.length; i++) {
                captionData[i] = captionData[i+1];
            }

            captionData.pop();

            console.dir(captionData);

            $("input[name='caption']").prop("checked",false);

			updateCaptionEditor();
			renderCaption();
			//saveCaptions(videoId, captionData);
			updateCaptions(videoId, checkedCaptions, 0, "", "MERGE");
        }

		function updateCaptionEditor() {

            if (captionData.hasOwnProperty(captionIndex-1)) {
                $('#prevTime').html(formatTime(captionData[captionIndex-1].start) + "<br />" + formatTime(captionData[captionIndex-1].end));
                $('#prevCaption').html(captionData[captionIndex-1].caption);
            } else {
                $('#prevTime').html("");
                $('#prevCaption').html("");
            }

            $('#currentTime').html(formatTime(captionData[captionIndex].start) + "<br />" + formatTime(captionData[captionIndex].end));
			$('#currentCaption').html(captionData[captionIndex].caption);

            var currentCaptionHtml = "";
            for (var i = 0; i < captionData[captionIndex].words.length; i++)
            {
                currentCaptionHtml += "<tr>"
                if ("st" in captionData[captionIndex].words[i] && "et" in captionData[captionIndex].words[i]) {
                    currentCaptionHtml += "<td width=\"25%\">" + captionData[captionIndex].words[i].st + "-" + captionData[captionIndex].words[i].et + "</td>"
                } else {
                    currentCaptionHtml += "<td width=\"25%\"></td>"
                }
                currentCaptionHtml += "<td width=\"55%\"><input type=\"text\" id=\"words-" + captionIndex + "-" + i + "\" class=\"form-control\" value=\"" + captionData[captionIndex].words[i].w + "\" /></td>"
                currentCaptionHtml += "<td width=\"10%\"><button type=\"button\" class=\"btn btn-light\" onclick=\"javascript:modifyWords('" + captionIndex + "', '" + i + "');\">Save</button></td>"
                if (i == (captionData[captionIndex].words.length - 1)) {
                    currentCaptionHtml += "<td width=\"10%\"></td>";
                } else {
                    currentCaptionHtml += "<td width=\"10%\"><button type=\"button\" class=\"btn btn-light\" onclick=\"javascript:splitCaption(" + captionIndex + ", " + i + ");\">Split Paragraph</button></td>"
                }
                currentCaptionHtml += "</tr>"
            }
            $('#currentCaptionTbody').empty();
            $('#currentCaptionTbody').append(currentCaptionHtml);


            if (captionData.hasOwnProperty(captionIndex+1)) {
                $('#nextTime').html(formatTime(captionData[captionIndex+1].start) + "<br />" + formatTime(captionData[captionIndex+1].end));
                $('#nextCaption').html(captionData[captionIndex+1].caption);
            } else {
                $('#nextTime').html("");
                $('#nextCaption').html("");
            }

            $('#prevCaptionCheckbox').val(captionIndex-1);
            $('#currentCaptionCheckbox').val(captionIndex);
            $('#nextCaptionCheckbox').val(captionIndex+1);

			$('#prevCaptionIndex').html(captionIndex);
			$('#captionIndex').html(captionIndex + 1);
			$('#nextCaptionIndex').html(captionIndex + 2);
		}

		confidenceHighlight.oninput = function() {

			confidence = parseFloat(this.value);

			if (confidence == NaN)
			{
				confidence = 0.75;
			}
			else
			{
				console.log('[INFO] Got new confidence: ' + confidence);
			}
			
			renderCaption();
		}

		video.addEventListener("ended", function() {
			video.pause();
			updatePlayPauseUI();
		});

		video.addEventListener("timeupdate", function() {
			videoProgress.value = video.currentTime / duration * videoProgress.max;
			timerOverlay.innerHTML = video.currentTime.toFixed(1) + 's';

			if (!video.paused)
			{
				if (pausePerCaption)
				{
					if (video.currentTime >= captionData[captionIndex].end)
					{
						video.pause();
						video.currentTime = captionData[captionIndex].start;
						updatePlayPauseUI();
					}
				}
				else
				{
					if (video.currentTime >= captionData[captionIndex].end)
					{
						stepForward(false, false);
					}
				}
			}
		});

        function formatTime(timeSeconds)
        {
            const ONE_HOUR = 60 * 60;
            const ONE_MINUTE = 60;
            var hours = Math.floor(timeSeconds / ONE_HOUR);
            var remainder = timeSeconds - (hours * ONE_HOUR);
            var minutes = Math.floor(remainder / 60);
            remainder = remainder - (minutes * ONE_MINUTE);
            var seconds = Math.floor(remainder);
            remainder = remainder - seconds;
            var millis = remainder;

            return (hours + '').padStart(2, '0') + ':' +
                    (minutes + '').padStart(2, '0') + ':' +
                    (seconds + '').padStart(2, '0') + '.' +
                    (Math.floor(millis*1000) + '').padStart(3, '0');
        }		

		function showControls()
		{
			$('#videoControls').show();
			$('#editorControls').show();
			$('#captionOverlay').show();
			$('#timerOverlay').show();
			$('#speedOverlay').show();
		}

		video.addEventListener('loadedmetadata', function() {
			duration = video.duration;
	   		videoProgress.max = progressMax;
	   		updatePlayPauseUI();
	   		showControls();

	   		if (captionData.length == 0)
	   		{
				captionData.push({
					start: 0.0,
					end: 5.0,
					caption: ''
				});
	   			toastr.error('Caption data is not available yet');
	   		}
	   		else
	   		{
	   			toastr.success('Video and caption data loaded');
	   		}

   			stepForward(true, false);

   			if (saveCaptionsTimer)
   			{
   				console.log('[INFO] Clearing existing save captions timer');
   				clearInterval(saveCaptionsTimer);
   			}

   			/**
   			 * Hook up auto saving every 20 seconds
   			 */
   			saveCaptionsTimer = setInterval(function() {

   				/*if (autosave.checked && dirty)
   				{
   					saveCaptionsLocal();
   				}*/

   			}, 20000);

   			console.log('[INFO] Created save captions timer: ' + saveCaptionsTimer);

		}, false);

		function updatePlayPauseUI()
		{
			if (video.paused) 
			{
				$('#playPauseIcon').removeClass('fa-pause');
				$('#playPauseIcon').addClass('fa-play');
			}
			else
			{
				$('#playPauseIcon').removeClass('fa-play');
				$('#playPauseIcon').addClass('fa-pause');		
			}

			if (pausePerCaption)
			{
				$('#repeatIcon').addClass('option-selected');
			}
			else
			{
				$('#repeatIcon').removeClass('option-selected');
			}			
		}

		function playPause()
		{ 
			if (video.paused) 
			{
				if (video.currentTime == video.duration)
				{
					captionIndex = 0;
					captionSelected(true);
					video.play();
				}
				else
				{
					video.play(); 
				}
				
			}
			else 
			{
				video.pause(); 
			}

			updatePlayPauseUI();
		} 

		function muteUnMute()
		{ 
			if( !video.muted)
			{
		 		video.muted = 'muted';
			}
			else
			{
				video.muted = false;
			} 
		}

		function captionSelected(seek)
		{
			updateCaptionEditor();
			renderCaption();

			if (seek)
			{
				video.currentTime = captionData[captionIndex].start;
			}
		}

		function stepForward(seek, autoPlay)
		{
			// Insert a new caption if we aren't at the end of the video
			if ((video.currentTime < (video.duration - 5)) && 
				(captionIndex > captionData.length - 1))
			{
				captionData.push({
					start: captionData[captionData.length - 1].end,
					end: Number(captionData[captionData.length - 1].end) + 5,
					caption: ''
				});

				captionIndex++;
			}

			if (captionIndex < captionData.length - 1)
			{
				captionIndex++;
			}

			captionSelected(seek);

			if (autoPlay && pausePerCaption && video.paused)
			{
				video.play();
				updatePlayPauseUI();
			}
		}

		function stepBackward(seek, autoPlay)
		{
			captionIndex--;

			if (captionIndex < 0)
			{
				captionIndex = 0;
			}

			captionSelected(seek);

			if (autoPlay && pausePerCaption && video.paused)
			{
				video.play();
				updatePlayPauseUI();
			}			
		}

		function repeatButton()
		{
			pausePerCaption = !pausePerCaption;
			updatePlayPauseUI();
		}

		function speedUp()
		{
			playSpeed += 0.1;

			if (playSpeed > 2.0)
			{
				playSpeed = 2.0;
			}

			video.playbackRate = playSpeed;
			speedOverlay.innerHTML = playSpeed.toFixed(1) + 'x';
		}

		function slowDown()
		{
			playSpeed -= 0.1;

			if (playSpeed < 0.5)
			{
				playSpeed = 0.5;
			}

			video.playbackRate = playSpeed;
			speedOverlay.innerHTML = playSpeed.toFixed(1) + 'x';
		}

		function saveCaptionsLocal()
		{
			saveCaptions(videoId, captionData);
			markDirty(false);
		}

        function burnCaptionsLocal()
        {
            burnCaptions(videoId);
        }

		function downloadCaptionsSRTLocal()
		{
			downloadCaptionsSRT(videoId, videoName);
		}

		function downloadCaptionsVTTLocal()
		{
			downloadCaptionsVTT(videoId, videoName);
		}

		function markDirty(dirtyFlag)
		{
			dirty = dirtyFlag;

			if (dirty)
			{
				$('#saveButton').removeClass('btn-secondary');
				$('#saveButton').addClass('btn-primary');
			}
			else
			{
				$('#saveButton').removeClass('btn-primary');
				$('#saveButton').addClass('btn-secondary');
			}
		}

		function renderStatusButton(videoId, status)
		{
			var html = "";

			if (status === 'READY')
			{
				html = "<button type=\"button\" class=\"btn btn-secondary control-button\" onclick=\"javascript:markComplete('" + videoId + "');\" title=\"Mark this video as complete\"><i class=\"fa fa-check-square fa-sm\"></i> Done</button>";
			}
			else if (status === 'COMPLETE')
			{
				html = "<button type=\"button\" class=\"btn btn-secondary control-button\" onclick=\"javascript:markIncomplete('" + videoId + "');\" title=\"Mark this video as incomplete\"><i class=\"fa fa-square fa-sm\"></i> Not Done</button>";
			}
			else if (status === 'UPDATING')
			{
				html = "<button type=\"button\" class=\"btn btn-secondary control-button disabled\" title=\"Status updating\"><i class=\"fa fa-hourglass fa-sm\"></i> Updating</button>";
			}

			var statusButton = $('#statusButton');
			statusButton.html(html);
		}

		function renderBurnCaptionsButton(status)
		{
			if (status === 'COMPLETE')
			{
				$('#burnCaptionsButton').removeAttr('disabled');
			}
			else
			{
				$('#burnCaptionsButton').attr('disabled','disabled');
			}
		}		

		function markComplete(videoId)
		{
			setStatus(videoId, "COMPLETE", "Video caption editing complete", "READY");
		}

		function markIncomplete(videoId)
		{
			setStatus(videoId, "READY", "Video ready for editing", "COMPLETE");
		}

		function updateVideoName(videoId, newVideoName)
		{
			var api = siteConfig.api_base + siteConfig.api_videoname + '/' + videoId;
			console.log('[INFO] updating video name');
			let axiosConfig = {
				headers: {
					'Content-Type': 'application/json;charset=UTF-8',
					'X-Api-Key': localStorage.apiKey
			  	}
			};	
			axios.post(api, 
				{ 
					"name": newVideoName
				}, 
				axiosConfig).then(function (response) 
			{	
				console.log('[INFO] successfully updated video name');
				videoName = newVideoName;
				$('#videoNameEdit').val(videoName);
				$('#videoName').html(videoName);
				toastr.success('Saved video name');
			})
			.catch(function (error) 
			{
				console.log('[ERROR] failed to update video name', error);
				$('#videoName').html(videoName);
				toastr.error('Failed to update video name');
			});
		}

		function updateVideoDescription(videoId, newVideoDescription)
		{
			var api = siteConfig.api_base + siteConfig.api_videodescription + '/' + videoId;
			console.log('[INFO] updating video description');
			let axiosConfig = {
				headers: {
					'Content-Type': 'application/json;charset=UTF-8',
					'X-Api-Key': localStorage.apiKey
			  	}
			};	
			axios.post(api, 
				{ 
					"description": newVideoDescription
				}, 
				axiosConfig).then(function (response) 
			{	
				console.log('[INFO] successfully updated video description');
				videoDescription = newVideoDescription;
				$('#videoDescriptionEdit').val(videoDescription);
				$('#videoDescription').html(videoDescription);
				toastr.success('Saved video description');
			})
			.catch(function (error) 
			{
				console.log('[ERROR] failed to update video description', error);
				$('#videoDescriptionEdit').val(videoDescription);
				toastr.error('Failed to update video description');
			});
		}		

		function setStatus(videoId, status, statusText, oldStatus)
		{
			renderStatusButton(videoId, "UPDATING");
			var api = siteConfig.api_base + siteConfig.api_videostatus + '/' + videoId;
			console.log('[INFO] updating video status');
			let axiosConfig = {
				headers: {
					'Content-Type': 'application/json;charset=UTF-8',
					'X-Api-Key': localStorage.apiKey
			  	}
			};	
			axios.post(api, 
				{ 
					"status": status, 
					"statusText": statusText
				}, 
				axiosConfig).then(function (response) 
			{
				console.log('[INFO] got response: %j', response);
				var newStatus = response.data.status;
				renderStatusButton(videoId, newStatus);
				renderBurnCaptionsButton(newStatus);
				console.log('[INFO] successfully updated status');
				toastr.success('Successfully updated video status');
			})
			.catch(function (error) 
			{
				renderStatusButton(videoId, oldStatus);
				renderBurnCaptionsButton(oldStatus);
				console.log('[ERROR] failed to update status', error);
				toastr.error('Failed to update video status');
			});
		}

		$("#renameVideoModal").on('shown.bs.modal', function(event) 
		{
			$("#videoNameEdit").focus();
		});

		$("#descriptionVideoModal").on('shown.bs.modal', function(event) 
		{
			$("#videoDescriptionEdit").focus();
		});

		$('#videoNameSave').click(function(event)
		{
			var newVideoName = $('#videoNameEdit').val();

			if (newVideoName.length == 0)
			{
				$('#videoNameEdit').val(videoName);
				toastr.error('Video name must not be blank');
			}
			else
			{
				updateVideoName('{{video.videoId}}', newVideoName);
			}
			
		});

		$('#videoDescriptionSave').click(function(event)
		{
			var newVideoDesc = $('#videoDescriptionEdit').val();

			if (newVideoDesc.length == 0)
			{
				$('#videoDescriptionEdit').val(videoDescription);
				toastr.error('Video description must not be blank');
			}
			else
			{
				updateVideoDescription('{{video.videoId}}', newVideoDesc);
			}
		});		

	</script> 
{{/if}}
